[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "rlaif_pipeline"
version = "0.3.0"
description = "Enhanced Reinforcement Learning with AI Feedback pipeline for harmless dialogue generation"
authors = [
    { name = "RLAIF Team", email = "contact@example.com" }
]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
keywords = ["reinforcement-learning", "ai-feedback", "nlp", "dialogue", "safety"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core dependencies with specific versions for stability
dependencies = [
    "torch>=2.1.0,<2.5.0",
    "transformers>=4.36.0,<4.50.0",
    "datasets>=2.16.0,<3.0.0",
    "accelerate>=0.25.0,<1.0.0",
    "trl>=0.7.4,<1.0.0",
    "peft>=0.7.0,<1.0.0",
    "bitsandbytes>=0.41.0,<1.0.0",
    "numpy>=1.24.0,<2.0.0",
    "pyyaml>=6.0.0",
    "tqdm>=4.65.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "wandb>=0.16.0",
    "tensorboard>=2.15.0",
]

[project.optional-dependencies]
# GPU monitoring and optimization
monitoring = [
    "pynvml>=11.5.0",
    "gpustat>=1.1.0",
    "psutil>=5.9.0",
]

# Safety and content filtering
safety = [
    "detoxify>=0.5.2",
    "transformers-interpret>=0.10.0",
]

# Development and testing
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

# Documentation
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinxcontrib-mermaid>=0.9.0",
]

# Extended evaluation metrics
evaluation = [
    "rouge-score>=0.1.2",
    "bert-score>=0.3.13",
    "evaluate>=0.4.0",
    "nltk>=3.8.1",
]

# All optional dependencies
all = [
    "rlaif_pipeline[monitoring,safety,dev,docs,evaluation]",
]

[project.urls]
Homepage = "https://github.com/yourusername/rlaif_pipeline"
Documentation = "https://rlaif_pipeline.readthedocs.io"
Repository = "https://github.com/yourusername/rlaif_pipeline.git"
Issues = "https://github.com/yourusername/rlaif_pipeline/issues"
Changelog = "https://github.com/yourusername/rlaif_pipeline/blob/main/CHANGELOG.md"

[project.scripts]
rlaif-train = "rlaif_pipeline.cli:train_main"
rlaif-eval = "rlaif_pipeline.cli:eval_main"
rlaif-config = "rlaif_pipeline.cli:config_main"

[tool.hatch.version]
path = "src/rlaif_pipeline/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/rlaif_pipeline"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/configs",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

# Development tools configuration
[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories to exclude
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "datasets.*",
    "trl.*",
    "peft.*",
    "bitsandbytes.*",
    "detoxify.*",
    "pynvml.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=rlaif_pipeline",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Environment-specific configurations
[tool.hatch.envs.default]
dependencies = [
    "rlaif_pipeline[dev]",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=rlaif_pipeline {args:tests}"
cov-report = ["test-cov", "coverage html"]
format = ["black src tests", "isort src tests"]
lint = ["flake8 src tests", "mypy src"]
check = ["format", "lint", "test"]

[tool.hatch.envs.docs]
dependencies = [
    "rlaif_pipeline[docs]",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -W -b html docs docs/_build/html"
serve = "python -m http.server -d docs/_build/html 8000"